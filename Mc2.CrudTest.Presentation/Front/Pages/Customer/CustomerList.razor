@page "/customerlist"
@inject HttpClient _http
@inject IJSRuntime JsRuntime

<NavLink class="nav-link" href="AddCustomer">
    <span class="oi oi-plus" aria-hidden="true">Add New</span>

</NavLink>

<h1>Customer Info</h1>
@if (Customers is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Date Of Birth</th>
                <th>Phone Number</th>
                <th>Email</th>
                <th>Bank Account Number</th>
                <th>Created On</th>
            </tr>
        </thead>
        <tbody>
            @foreach (GetCustomersQueryResult customer in Customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.DateOfBirth</td>
                    <td>@customer.PhoneNumber</td>
                    <td>@customer.Email</td>
                    <td>@customer.BankAccountNumber</td>
                    <td>@customer.CreatedOn</td>
                    <td>
                        <a class="nav-link" href="EditCustomer/@customer.Id">
                            <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                        </a>

                        <a class="nav-link" href="javascript:void(0)" @onclick="(() => DeleteCustomer(customer.Id.Value))">
                            <span class="oi oi-trash" aria-hidden="true">Delete</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<GetCustomersQueryResult> Customers;
    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage responseMessage = await _http.PostAsJsonAsync<CustomerSearchDTO>("GetCustomers", new CustomerSearchDTO { }).ConfigureAwait(false);
        string resultString = await responseMessage.Content.ReadAsStringAsync();
        Customers = JsonConvert.DeserializeObject<ServiceResponse<List<GetCustomersQueryResult>>>(resultString)?.Data;
    }

    protected async void DeleteCustomer(int id)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete this customer?");
        if (confirm)
        {
            HttpResponseMessage responseMessage = await _http.PostAsJsonAsync<Customer>("DeleteCustomer", new Customer { Id = id }).ConfigureAwait(false);
            string resultString = await responseMessage.Content.ReadAsStringAsync();
            ServiceResponse<bool>? result = JsonConvert.DeserializeObject<ServiceResponse<bool>>(resultString);

            if (result.ResultStatus == ResultStatus.Successful)
            {
                await JsRuntime.InvokeVoidAsync("alert", result.Message);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", string.Join(',', result.Errors));
            }
        }
    }
}
